version 1.0

## Copyright Wellcome Sanger Institute, Oxford University, and the Broad Institute 2023
##
## This WDL pipeline implements CNV Coverage Calls portion of the vector Copy Number Variation Pipeline as described in:
## https://github.com/malariagen/pipelines/blob/add_cnv_vector_spec/docs/specs/cnv-vector.md
##.

import "../../../structs/gcp/RunTimeSettings.wdl"
import "../../../tasks/gcp/Tasks.wdl" as Tasks
import "../../../tasks/gcp/StatisticalPhasingTasks.wdl" as StatisticalPhasingTasks

workflow CNVCoverageCalls {
  String pipeline_version = "1.0.0"

  ## Sub-pipeline: CNV Coverage Calls

#### Step: CNV Coverage Calls
**Description:** Uses the predicted copy number state values generated by the HMM to call CNVs. Calls CNVs based on the change in predicted copy number within consecutive windows. Calls variants by grouping CNVs observed in multiple samples, as determined by the start and end coordinates. \
**Inputs:** Copy number state files. 1 per window per sample.\
**Outputs:** File similar to VCF. Lists variants with genotypes for each sample. 1 per sample set.\
**Software:** R version 3.6.1\
Steps in CNV_pipeline/scripts/coverage_CNVs_vobs.sh\


  input {
    String project_id
    String sample_name
    File input_bam
    File input_bam_index

    File CNV_HMM_output

    RunTimeSettings runTimeSettings
    String runtime_zones
  }

  String output_basename = project_id + "_" + sample_name

  # Step 1: CNV Coverage Calls
  call CNVCoverageTasks.CNVCoverageCalls as CoverageCalls {
    input:
      input_bam = input_bam,
      input_bam_index = input_bam_index,
      project_id = project_id,
      output_basename = output_basename,
      runTimeSettings = runTimeSettings,
      runtime_zones = runtime_zones
  }

  meta {
    allowNestedInputs: true
  }

  output {
    File output_file = CNVCalling.output_file
  }
}

task CNVCoverageCalls {
  input {
    # chrom: Runs separately for each species and chromosome (2L, 2R, 3L, 3R, X)
    # manifest: species specific manifest file - NOTE different from other manifests
    # coverage_variance_file: output from CoverageSummary step in HMM pipeline
    # gene_coordinates_file: pipeline input
    # detox_genes_file: pipeline input
    # workingfolder: Specifies the folder containing the HMM output files - will be a tarred output here
    # ncores: ??
    # outputfolder: Make sure that the output name contains the name of the species (since this will be run once per species)
    # metadata: pipeline input

    String docker = "us.gcr.io/broad-gotc-prod/r:3.6.1"
    Int num_cpu = 1
    RunTimeSettings runTimeSettings
    Int preemptible_tries = runTimeSettings.preemptible_tries
    String runtime_zones = "us-central1-b"
    Float mem_gb = 3.75
    Int disk_gb = 50
  }

  command <<<
    R-3.6.1 --slave -f $scriptsfolder/CNV_analysis.r --args $chrom \
      $manifest \
      $coverage_variance_file \
      $gene_coordinates_file \
      $detox_genes_file \
      $workingfolder \
      $ncores \
      $outputfolder \
      $metadata \
      > $coveragefolder/$chrom/CNV_analysis_logs/CNV_analysis_${output_name}.log 2>&1
  >>>
  runtime {
    docker: docker
    preemptible: preemptible_tries
    cpu: num_cpu
    memory: mem_gb + " GiB"
    disks: "local-disk " + disk_gb + " HDD"
    zones: runtime_zones
  }
  output {
    File diagnostic_reads_tar = # zip of the directory structure for the extract diagnostic reads step
  }
}
